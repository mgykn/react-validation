{"ast":null,"code":"import _objectSpread from \"/Users/mugeyakin/Projects/react/react-validation/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/mugeyakin/Projects/react/react-validation/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mugeyakin/Projects/react/react-validation/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mugeyakin/Projects/react/react-validation/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mugeyakin/Projects/react/react-validation/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/mugeyakin/Projects/react/react-validation/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/mugeyakin/Projects/react/react-validation/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mugeyakin/Projects/react/react-validation/src/pages/XIVodafone/Query/send.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Link, withRouter } from \"react-router-dom\";\nimport Form from '../../../components/form/form';\nimport { maximumSmsLength, calculateSmsLength } from '../../../actions/utils';\nimport Message from '../../../components/message/index';\nimport { query, findTargetQuery, client, sendQuery, testSmsQuery, sendInfo, sendFileInfo, sendEdit, dispatchItem } from '../../../actions/actions';\n\nvar QuerySend =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(QuerySend, _React$Component);\n\n  function QuerySend(props) {\n    var _this;\n\n    _classCallCheck(this, QuerySend);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuerySend).call(this, props));\n    var queryId = _this.props.match.params.id;\n    var companyId = _this.props.match.params.companyId;\n    var sendId = _this.props.match.params.sendId;\n    _this.state = {\n      fileErrorListPopupContent: '',\n      formModel: {\n        campaignName: {\n          value: '',\n          name: 'campaignName',\n          type: 'text',\n          label: 'Gönderim Adı',\n          placeholder: 'Gönderim adı',\n          error: 'Lütfen gönderim adı girin.',\n          valid: false,\n          touched: false,\n          validationRules: {\n            isRequired: true\n          }\n        },\n        uniqueCodeFile: {\n          value: '',\n          valuePlaceholder: '',\n          name: 'uniqueCodeFile',\n          type: 'file',\n          label: 'Unique Kod Dosyası Yükle (Lütfen sadece .csv veya .xlsx uzantılı dosya yükleyiniz)',\n          placeholder: 'Bilgisayarınızdan seçim yapmak için tıklayın',\n          error: 'Lütfen bir dosya seçin.',\n          valid: false,\n          touched: false,\n          validationRules: {}\n        },\n        uniqueCodeLength: {\n          value: '',\n          name: 'uniqueCodeLength',\n          type: 'text',\n          label: 'Unique Kod Uzunluğu',\n          placeholder: 'Unique Kod Uzunluğu',\n          error: 'Lütfen unique kod uzunluğu girin.',\n          valid: false,\n          touched: false,\n          validationRules: {\n            isNumber: true\n          }\n        },\n        sendCount: {\n          value: '',\n          name: 'sendCount',\n          type: 'text',\n          label: 'Gönderim Adedi',\n          placeholder: 'Gönderim Adedi',\n          error: 'Lütfen gönderim adedi girin.',\n          valid: false,\n          touched: false,\n          validationRules: {\n            isRequired: true,\n            isNumber: true\n          }\n        },\n        broadcastMessage: {\n          value: '',\n          name: 'broadcastMessage',\n          maxLength: 400,\n          type: 'textarea',\n          label: 'Gönderim Metni',\n          placeholder: 'Gönderim metni',\n          error: 'Lütfen gönderim metni girin.',\n          valid: false,\n          touched: false,\n          validationRules: {\n            isRequired: true\n          }\n        },\n        sendDate: {\n          value: '',\n          name: 'sendDate',\n          type: 'textdate',\n          label: 'En Erken Gönderim Tarihi',\n          error: 'Lütfen tarih seçin',\n          valid: false,\n          touched: false,\n          isHalf: true,\n          validationRules: {\n            isDate: true\n          }\n        },\n        sendTime: {\n          value: '',\n          name: 'sendTime',\n          type: 'timepicker',\n          label: 'Saat',\n          error: 'Lütfen zaman seçin.',\n          valid: false,\n          touched: false,\n          isHalf: true,\n          validationRules: {\n            isTime: true\n          }\n        },\n        latestSendDate: {\n          value: '',\n          name: 'latestSendDate',\n          type: 'textdate',\n          label: 'En Geç Gönderim Tarihi',\n          error: 'Lütfen tarih seçin',\n          valid: false,\n          touched: false,\n          isHalf: true,\n          isHalfStart: true,\n          validationRules: {\n            isDate: true\n          }\n        },\n        latestSendTime: {\n          value: '',\n          name: 'latestSendTime',\n          type: 'timepicker',\n          label: 'Saat',\n          error: 'Lütfen zaman seçin.',\n          valid: false,\n          touched: false,\n          isHalf: true,\n          validationRules: {\n            isTime: true\n          }\n        },\n        testSmsNumber: {\n          value: '',\n          name: 'testSmsNumber',\n          type: 'text',\n          label: 'Test Numarası',\n          placeholder: 'Lütfen en az 1 en fazla 3 numarayı aralarında vilgül olacak sekilde girin.',\n          error: 'Lütfen en az 1 en fazla 3 numarayı aralarında vilgül olacak sekilde girin.',\n          valid: false,\n          touched: false,\n          validationRules: {}\n        }\n      },\n      companyId: companyId,\n      queryId: queryId,\n      sendId: sendId,\n      queryName: \"\",\n      companyName: \"\",\n      personCount: 0,\n      originator: \"\",\n      limit: 0,\n      currentSmsCount: 1\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.onInputChange = _this.onInputChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(QuerySend, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //Edit\n      if (this.state.sendId) {\n        this.props.dispatch(sendInfo(this.state.sendId, function (data) {\n          _this2.setState({\n            formModel: _objectSpread({}, _this2.state.formModel, {\n              campaignName: _objectSpread({}, _this2.state.formModel.campaignName, {\n                value: data.campaignName,\n                disabled: true\n              }),\n              uniqueCodeLength: _objectSpread({}, _this2.state.formModel.uniqueCodeLength, {\n                value: data.uniqueCodeLength\n              }),\n              sendCount: _objectSpread({}, _this2.state.formModel.sendCount, {\n                value: data.sendCount\n              }),\n              broadcastMessage: _objectSpread({}, _this2.state.formModel.broadcastMessage, {\n                value: data.broadcastMessage\n              })\n            }),\n            companyId: data.xCustomerId,\n            queryId: data.queryId\n          });\n\n          if (data.sendDate && data.sendDate.length > 0) {\n            var sendDate = data.sendDate.split(' ')[0];\n            var sendTime = data.sendDate.split(' ')[1];\n\n            _this2.setState({\n              formModel: _objectSpread({}, _this2.state.formModel, {\n                sendDate: _objectSpread({}, _this2.state.formModel.sendDate, {\n                  value: sendDate.substring(0, 2) + \".\" + sendDate.substring(2, 4) + \".\" + sendDate.substring(4, 8)\n                }),\n                sendTime: _objectSpread({}, _this2.state.formModel.sendTime, {\n                  value: sendTime\n                })\n              })\n            });\n          }\n\n          if (data.latestSendDate && data.latestSendDate.length > 0) {\n            var latestSendDate = data.latestSendDate.split(' ')[0];\n            var latestSendTime = data.latestSendDate.split(' ')[1];\n\n            _this2.setState({\n              formModel: _objectSpread({}, _this2.state.formModel, {\n                latestSendDate: _objectSpread({}, _this2.state.formModel.latestSendDate, {\n                  value: latestSendDate.substring(0, 2) + \".\" + latestSendDate.substring(2, 4) + \".\" + latestSendDate.substring(4, 8)\n                }),\n                latestSendTime: _objectSpread({}, _this2.state.formModel.latestSendTime, {\n                  value: latestSendTime\n                })\n              })\n            });\n          }\n\n          var broadcastMessage = data.broadcastMessage;\n          var currentSmsCount = calculateSmsLength(broadcastMessage, true);\n\n          _this2.setState({\n            currentSmsCount: currentSmsCount\n          }); //Get UniqueCode File\n\n\n          if (data.uniqueCodeLength && data.uniqueCodeLength > 0) {\n            _this2.props.dispatch(sendFileInfo(_this2.state.sendId, function (blob, filename) {\n              var file = new File([blob], filename);\n\n              _this2.setState({\n                formModel: _objectSpread({}, _this2.state.formModel, {\n                  uniqueCodeFile: _objectSpread({}, _this2.state.formModel.uniqueCodeFile, {\n                    value: file,\n                    valuePlaceholder: filename\n                  })\n                })\n              });\n            }, function () {\n              _this2.props.dispatch(dispatchItem(\"NOTIFICATION\", {\n                message: 'Unicode dosyası bulunamadı!',\n                isError: true\n              }));\n\n              _this2.props.history.push('/xivodafone/report');\n            }));\n          } //Get Query Info\n\n\n          var serviceDataForQuery = {\n            queryId: data.queryId\n          };\n\n          _this2.props.dispatch(query(serviceDataForQuery, function (data) {\n            _this2.setState({\n              queryName: data.queryName\n            });\n\n            var serviceDataForTarget = {};\n            serviceDataForTarget[\"params\"] = data.queryParam;\n\n            _this2.props.dispatch(findTargetQuery(serviceDataForTarget, function (data) {\n              _this2.setState({\n                personCount: data.count\n              });\n            }, function () {}));\n          }, function () {\n            _this2.props.dispatch(dispatchItem(\"NOTIFICATION\", {\n              message: 'Sorgu bulunamadı!',\n              isError: true\n            }));\n\n            _this2.props.history.push('/xivodafone/report');\n          })); //Get Customer Info\n\n\n          var serviceDataForCompany = {\n            xCustomerId: data.xCustomerId\n          };\n\n          _this2.props.dispatch(client(serviceDataForCompany, function (data) {\n            _this2.setState({\n              companyName: data.companyName,\n              originator: data.originator,\n              limit: data.limit\n            });\n          }, function () {\n            _this2.props.dispatch(dispatchItem(\"NOTIFICATION\", {\n              message: 'Müşeri bulunamadı!',\n              isError: true\n            }));\n\n            _this2.props.history.push('/xivodafone/report');\n          }));\n        }, function () {\n          _this2.props.dispatch(dispatchItem(\"NOTIFICATION\", {\n            message: 'Bir hata oluştu!',\n            isError: true\n          }));\n\n          _this2.props.history.push('/xivodafone/report');\n        }));\n      } else {\n        //Get Query Info\n        var serviceDataForQuery = {\n          queryId: this.state.queryId\n        };\n        this.props.dispatch(query(serviceDataForQuery, function (data) {\n          _this2.setState({\n            queryName: data.queryName\n          });\n\n          var serviceDataForTarget = {};\n          serviceDataForTarget[\"params\"] = data.queryParam;\n\n          _this2.props.dispatch(findTargetQuery(serviceDataForTarget, function (data) {\n            _this2.setState({\n              personCount: data.count\n            });\n          }, function () {}));\n        }, function () {\n          _this2.props.dispatch(dispatchItem(\"NOTIFICATION\", {\n            message: 'Sorgu bulunamadı!',\n            isError: true\n          }));\n\n          _this2.props.history.push('/xivodafone/query/list');\n        })); //Get Customer Info\n\n        var serviceDataForCompany = {\n          xCustomerId: this.state.companyId\n        };\n        this.props.dispatch(client(serviceDataForCompany, function (data) {\n          _this2.setState({\n            companyName: data.companyName,\n            originator: data.originator,\n            limit: data.limit\n          });\n        }, function () {\n          _this2.props.dispatch(dispatchItem(\"NOTIFICATION\", {\n            message: 'Müşeri bulunamadı!',\n            isError: true\n          }));\n\n          _this2.props.history.push('/xivodafone/query/list');\n        }));\n      }\n    }\n  }, {\n    key: \"onInputChange\",\n    value: function onInputChange(model, name) {\n      if (name == 'broadcastMessage') {\n        var broadcastMessage = model[\"broadcastMessage\"].value;\n        var currentSmsCount = calculateSmsLength(broadcastMessage, true);\n        this.setState({\n          currentSmsCount: currentSmsCount\n        });\n      }\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(data, isSecondButton) {\n      var _this3 = this;\n\n      var smsLength = maximumSmsLength(data.broadcastMessage, true);\n\n      if (data.broadcastMessage.length > smsLength) {\n        var notification = {\n          isError: true,\n          message: 'Göndereceğiniz SMS maksimum ' + smsLength + ' uzunluğunda olabilir, şuanda ' + data.broadcastMessage.length + 'uzulunğunda.'\n        };\n        this.props.dispatch(dispatchItem(\"NOTIFICATION\", notification));\n      } else if (data.sendCount > Math.floor(this.state.limit / this.state.currentSmsCount)) {\n        var notification = {\n          isError: true,\n          message: Math.floor(this.state.limit / this.state.currentSmsCount) + ' SMS boyutunda bir metin girildiği için en fazla ' + Math.floor(this.state.limit / this.state.currentSmsCount) + ' adedinde kişiye gönderim yapılabilir.'\n        };\n        this.props.dispatch(dispatchItem(\"NOTIFICATION\", notification));\n      } else {\n        var sendTimeHour = data.sendTime.split(':')[0];\n        var sendTimeMinute = data.sendTime.split(':')[1];\n        var latestSendTimeHour = data.latestSendTime.split(':')[0];\n        var latestSendTimeMinute = data.latestSendTime.split(':')[1];\n\n        if ((isSecondButton = false) && (sendTimeHour < 9 || sendTimeHour > 20 && sendTimeMinute > 0 || latestSendTimeHour < 9 || latestSendTimeHour > 20 && latestSendTimeMinute > 0)) {\n          var notification = {\n            isError: true,\n            message: 'En erken ve en geç gönderim zamanları için lütfen 09:00 ile 20:00 arasında bir zaman seçiniz.'\n          };\n          this.props.dispatch(dispatchItem(\"NOTIFICATION\", notification));\n        } else {\n          if (isSecondButton = true) {\n            var today = new Date();\n            var month = (\"0\" + (today.getMonth() + 1)).slice(-2);\n            var date = (\"0\" + today.getDate()).slice(-2);\n            var hour = (\"0\" + today.getHours).slice(-2);\n            var minutes = (\"0\" + today.getMinutes).slice(-2);\n            var serviceData = {\n              broadcastMessage: data.broadcastMessage,\n              campaignName: data.campaignName,\n              sendCount: data.sendCount,\n              sendDate: date + \"\" + month + \"\" + today.getFullYear() + \" \" + hour + ':' + minutes,\n              xCustomerId: this.state.companyId,\n              queryId: this.state.queryId,\n              receiver: data.testSmsNumber\n            };\n          } else {\n            var serviceData = {\n              broadcastMessage: data.broadcastMessage,\n              campaignName: data.campaignName,\n              sendCount: data.sendCount,\n              sendDate: data.sendDate + \" \" + data.sendTime,\n              latestSendDate: data.latestSendDate + \" \" + data.latestSendTime,\n              xCustomerId: this.state.companyId,\n              queryId: this.state.queryId\n            };\n          }\n\n          if (data.uniqueCodeFile) {\n            serviceData[\"uniqueCodeFile\"] = data.uniqueCodeFile;\n            serviceData[\"uniqueCodeLength\"] = data.uniqueCodeLength;\n          }\n\n          if (this.state.sendId) {\n            serviceData[\"requestId\"] = this.state.sendId;\n          }\n\n          var serviceDataForm = new FormData();\n\n          for (var key in serviceData) {\n            serviceDataForm.append(key, serviceData[key]);\n          }\n\n          if (isSecondButton) {\n            this.props.dispatch(testSmsQuery(serviceDataForm, function (data) {\n              _this3.props.dispatch(dispatchItem(\"NOTIFICATION\", {\n                message: 'Test SMS\\'i gönderildi.',\n                isError: false\n              }));\n            }, function () {}));\n          } else {\n            if (this.state.sendId) {\n              this.props.dispatch(sendEdit(serviceDataForm, function (data) {\n                _this3.props.history.push('/xivodafone/query/send/success');\n              }, function () {}));\n            } else {\n              this.props.dispatch(sendQuery(serviceDataForm, function (data) {\n                _this3.props.history.push('/xivodafone/query/send/success');\n              }, function () {}));\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"section\", {\n        className: \"panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }, React.createElement(Message, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"left only-desktop\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        },\n        __self: this\n      }, \"Sorgu Detaylar\\u0131\"), !this.state.sendId && React.createElement(Link, {\n        id: \"setup-edit\",\n        className: \"link\",\n        to: \"/xivodafone/query/edit/\" + this.state.queryId + \"/\" + this.state.companyId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require(\"../../../assets/icons/icon-edit.svg\"),\n        \"aria-hidden\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481\n        },\n        __self: this\n      }, \"D\\xFCzenle\"))), React.createElement(\"div\", {\n        className: \"user-sms-choosen\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486\n        },\n        __self: this\n      }, \"A\\u015Fa\\u011F\\u0131daki sorgu sonu\\xE7lar\\u0131ndan olu\\u015Fan gruba yazd\\u0131\\u011F\\u0131n\\u0131z mesaj g\\xF6nderilecek.\")), React.createElement(\"div\", {\n        className: \"items\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"item-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      }, \"Sorgu \\u0130smi\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494\n        },\n        __self: this\n      }, this.state.queryName)), React.createElement(\"div\", {\n        className: \"item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }, \"M\\xFC\\u015Fteri\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, this.state.companyName)), React.createElement(\"div\", {\n        className: \"item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }, \"Ki\\u015Fi Say\\u0131s\\u0131\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }, this.state.personCount)), React.createElement(\"div\", {\n        className: \"item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, \"Originator\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, this.state.originator)), React.createElement(\"div\", {\n        className: \"item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, \"SMS Hakk\\u0131\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, Math.floor(this.state.limit / this.state.currentSmsCount)))), React.createElement(\"div\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title-default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }, \"Dikkat Edilmesi Gereken Noktalar:\"), React.createElement(\"div\", {\n        className: \"text-default font\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \"\\xC7\\u0131k\\u0131\\u015F metni otomatik eklenecektir. Eklemenize gerek yoktur.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }, \"Unique kod varsa {#} olarak metinde belirtilmelidir.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525\n        },\n        __self: this\n      }, \"Sadece Vodafonelulara \\xF6zel verilecek bir fayda olmal\\u0131d\\u0131r.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        },\n        __self: this\n      }, \"Unique kod karakter say\\u0131s\\u0131na dahildir.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531\n        },\n        __self: this\n      }, \"1 SMS 160 karakterdir, karakter say\\u0131s\\u0131 artt\\u0131k\\xE7a bakiyeden SMS e\\u015Fde\\u011Feri kadar d\\xFC\\u015Fer.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      }, \"Bir link veriliyorsa, linkin gitti\\u011Fi websitesinde de Vodafonelulara \\xF6zel fayda vurgulanmal\\u0131d\\u0131r.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, \"Unique kod varsa {#} olarak metinde belirtilmelidir.\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, \"Test numaras\\u0131 girilirken numara format\\u0131: 905XXXXXXXXX\")))))), React.createElement(\"div\", {\n        className: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title-default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551\n        },\n        __self: this\n      }, \"G\\xF6nderim Detaylar\\u0131\"))), React.createElement(\"div\", {\n        className: \"user-sms-details\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555\n        },\n        __self: this\n      }, React.createElement(Form, {\n        model: this.state.formModel,\n        formId: \"query-send-form\",\n        onInputChange: this.onInputChange,\n        handleSubmit: this.handleSubmit,\n        buttonText: \"Onaya Gönder\",\n        buttonId: \"query-sms-send\",\n        secondButtonText: \"Test SMS'i Gönder\",\n        secondButtonId: \"query-sms-test\",\n        secondButtonExtraClass: \"link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return QuerySend;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    app: state.app\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(QuerySend));","map":{"version":3,"sources":["/Users/mugeyakin/Projects/react/react-validation/src/pages/XIVodafone/Query/send.js"],"names":["React","connect","BrowserRouter","Router","Link","withRouter","Form","maximumSmsLength","calculateSmsLength","Message","query","findTargetQuery","client","sendQuery","testSmsQuery","sendInfo","sendFileInfo","sendEdit","dispatchItem","QuerySend","props","queryId","match","params","id","companyId","sendId","state","fileErrorListPopupContent","formModel","campaignName","value","name","type","label","placeholder","error","valid","touched","validationRules","isRequired","uniqueCodeFile","valuePlaceholder","uniqueCodeLength","isNumber","sendCount","broadcastMessage","maxLength","sendDate","isHalf","isDate","sendTime","isTime","latestSendDate","isHalfStart","latestSendTime","testSmsNumber","queryName","companyName","personCount","originator","limit","currentSmsCount","handleSubmit","bind","onInputChange","dispatch","data","setState","disabled","xCustomerId","length","split","substring","blob","filename","file","File","message","isError","history","push","serviceDataForQuery","serviceDataForTarget","queryParam","count","serviceDataForCompany","model","isSecondButton","smsLength","notification","Math","floor","sendTimeHour","sendTimeMinute","latestSendTimeHour","latestSendTimeMinute","today","Date","month","getMonth","slice","date","getDate","hour","getHours","minutes","getMinutes","serviceData","getFullYear","receiver","serviceDataForm","FormData","key","append","require","Component","mapStateToProps","app"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Link,\n  withRouter\n} from \"react-router-dom\";\nimport Form from '../../../components/form/form';\nimport { maximumSmsLength, calculateSmsLength } from '../../../actions/utils';\nimport Message from '../../../components/message/index';\nimport { query, findTargetQuery, client, sendQuery, testSmsQuery, sendInfo, sendFileInfo, sendEdit, dispatchItem } from '../../../actions/actions';\n\nclass QuerySend extends React.Component {\n    constructor(props)\n    {\n        super(props)\n\n        const queryId = this.props.match.params.id;\n        const companyId = this.props.match.params.companyId;\n        const sendId = this.props.match.params.sendId;\n\n        this.state = {\n            fileErrorListPopupContent: '',\n            formModel: {\n                campaignName: {\n                    value: '',\n                    name: 'campaignName',\n                    type: 'text',\n                    label: 'Gönderim Adı',\n                    placeholder: 'Gönderim adı',\n                    error: 'Lütfen gönderim adı girin.',\n                    valid: false,\n                    touched: false,\n                    validationRules: {\n                        isRequired: true\n                    }\n                },\n                uniqueCodeFile: {\n                    value: '',\n                    valuePlaceholder: '',\n                    name: 'uniqueCodeFile',\n                    type: 'file',\n                    label: 'Unique Kod Dosyası Yükle (Lütfen sadece .csv veya .xlsx uzantılı dosya yükleyiniz)',\n                    placeholder: 'Bilgisayarınızdan seçim yapmak için tıklayın',\n                    error: 'Lütfen bir dosya seçin.',\n                    valid: false,\n                    touched: false,\n                    validationRules: {\n                    }\n                },\n                uniqueCodeLength: {\n                    value: '',\n                    name: 'uniqueCodeLength',\n                    type: 'text',\n                    label: 'Unique Kod Uzunluğu',\n                    placeholder: 'Unique Kod Uzunluğu',\n                    error: 'Lütfen unique kod uzunluğu girin.',\n                    valid: false,\n                    touched: false,\n                    validationRules: {\n                        isNumber: true\n                    }\n                },\n                sendCount: {\n                    value: '',\n                    name: 'sendCount',\n                    type: 'text',\n                    label: 'Gönderim Adedi',\n                    placeholder: 'Gönderim Adedi',\n                    error: 'Lütfen gönderim adedi girin.',\n                    valid: false,\n                    touched: false,\n                    validationRules: {\n                        isRequired: true,\n                        isNumber: true\n                    }\n                },\n                broadcastMessage: {\n                    value: '',\n                    name: 'broadcastMessage',\n                    maxLength: 400,\n                    type: 'textarea',\n                    label: 'Gönderim Metni',\n                    placeholder: 'Gönderim metni',\n                    error: 'Lütfen gönderim metni girin.',\n                    valid: false,\n                    touched: false,\n                    validationRules: {\n                        isRequired: true\n                    }\n                },\n                sendDate: {\n                    value: '',\n                    name: 'sendDate',\n                    type: 'textdate',\n                    label: 'En Erken Gönderim Tarihi',\n                    error: 'Lütfen tarih seçin',\n                    valid: false,\n                    touched: false,\n                    isHalf: true,\n                    validationRules: {\n                        isDate: true\n                    }\n                },\n                sendTime: {\n                    value: '',\n                    name: 'sendTime',\n                    type: 'timepicker',\n                    label: 'Saat',\n                    error: 'Lütfen zaman seçin.',\n                    valid: false,\n                    touched: false,\n                    isHalf: true,\n                    validationRules: {\n                        isTime: true\n                    }\n                },\n                latestSendDate : {\n                    value: '',\n                    name: 'latestSendDate',\n                    type: 'textdate',\n                    label: 'En Geç Gönderim Tarihi',\n                    error: 'Lütfen tarih seçin',\n                    valid: false,\n                    touched: false,\n                    isHalf: true,\n                    isHalfStart: true,\n                    validationRules: {\n                        isDate: true\n                    }\n                },\n                latestSendTime: {\n                    value: '',\n                    name: 'latestSendTime',\n                    type: 'timepicker',\n                    label: 'Saat',\n                    error: 'Lütfen zaman seçin.',\n                    valid: false,\n                    touched: false,\n                    isHalf: true,\n                    validationRules: {\n                        isTime: true\n                    }\n                },\n                testSmsNumber: {\n                    value: '',\n                    name: 'testSmsNumber',\n                    type: 'text',\n                    label: 'Test Numarası',\n                    placeholder: 'Lütfen en az 1 en fazla 3 numarayı aralarında vilgül olacak sekilde girin.',\n                    error: 'Lütfen en az 1 en fazla 3 numarayı aralarında vilgül olacak sekilde girin.',\n                    valid: false,\n                    touched: false,\n                    validationRules: {\n                    }\n                },\n            },\n            companyId: companyId,\n            queryId: queryId,\n            sendId: sendId,\n            queryName: \"\",\n            companyName: \"\",\n            personCount: 0,\n            originator: \"\",\n            limit: 0,\n            currentSmsCount: 1\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.onInputChange = this.onInputChange.bind(this);\n    }\n\n    componentDidMount() {\n        //Edit\n        if(this.state.sendId) {\n            this.props.dispatch(sendInfo(this.state.sendId, (data) => {\n                this.setState({\n                    formModel: {\n                        ...this.state.formModel,\n                        campaignName: {\n                            ...this.state.formModel.campaignName,\n                            value: data.campaignName,\n                            disabled: true\n                        },\n                        uniqueCodeLength: {\n                            ...this.state.formModel.uniqueCodeLength,\n                            value: data.uniqueCodeLength\n                        },\n                        sendCount: {\n                            ...this.state.formModel.sendCount,\n                            value: data.sendCount\n                        },\n                        broadcastMessage: {\n                            ...this.state.formModel.broadcastMessage,\n                            value: data.broadcastMessage\n                        },\n                    },\n                    companyId: data.xCustomerId,\n                    queryId: data.queryId\n                });\n\n                if(data.sendDate && data.sendDate.length > 0) {\n                    var sendDate = data.sendDate.split(' ')[0];\n                    var sendTime = data.sendDate.split(' ')[1];\n                    this.setState({\n                        formModel: {\n                            ...this.state.formModel,\n                            sendDate: {\n                                ...this.state.formModel.sendDate,\n                                value: sendDate.substring(0, 2) + \".\" + sendDate.substring(2, 4) + \".\" + sendDate.substring(4, 8)\n                            },\n                            sendTime: {\n                                ...this.state.formModel.sendTime,\n                                value: sendTime\n                            }\n                        }\n                    });\n                }\n                \n                if(data.latestSendDate && data.latestSendDate.length > 0) {\n                    var latestSendDate = data.latestSendDate.split(' ')[0];\n                    var latestSendTime = data.latestSendDate.split(' ')[1];\n                    this.setState({\n                        formModel: {\n                            ...this.state.formModel,\n                            latestSendDate : {\n                                ...this.state.formModel.latestSendDate,\n                                value: latestSendDate.substring(0, 2) + \".\" + latestSendDate.substring(2, 4) + \".\" + latestSendDate.substring(4, 8)\n                            },\n                            latestSendTime: {\n                                ...this.state.formModel.latestSendTime,\n                                value: latestSendTime\n                            }\n                        }\n                    });\n                }\n\n                var broadcastMessage = data.broadcastMessage;\n                var currentSmsCount = calculateSmsLength(broadcastMessage, true);\n                this.setState({\n                    currentSmsCount: currentSmsCount\n                });\n\n                //Get UniqueCode File\n                if(data.uniqueCodeLength && data.uniqueCodeLength > 0) {\n                    this.props.dispatch(sendFileInfo(this.state.sendId, (blob, filename) => {\n                        var file = new File([blob], filename)\n                        this.setState({\n                            formModel: {\n                                ...this.state.formModel,\n                                uniqueCodeFile : {\n                                    ...this.state.formModel.uniqueCodeFile,\n                                    value: file,\n                                    valuePlaceholder: filename\n                                }\n                            }\n                        });\n                    }, () => {\n                        this.props.dispatch(dispatchItem(\"NOTIFICATION\", { message: 'Unicode dosyası bulunamadı!', isError: true }));\n                        this.props.history.push('/xivodafone/report');\n                    }));\n                }\n\n                //Get Query Info\n                var serviceDataForQuery = {\n                    queryId: data.queryId\n                }\n                this.props.dispatch(query(serviceDataForQuery, (data) => {\n                    this.setState({\n                        queryName: data.queryName\n                    });\n                    \n                    var serviceDataForTarget = {};\n                    serviceDataForTarget[\"params\"] = data.queryParam;\n                    this.props.dispatch(findTargetQuery(serviceDataForTarget, (data) => {\n                        this.setState({\n                            personCount: data.count\n                        });\n                    }, () => {\n                    }));\n                }, () => {\n                    this.props.dispatch(dispatchItem(\"NOTIFICATION\", { message: 'Sorgu bulunamadı!', isError: true }));\n                    this.props.history.push('/xivodafone/report');\n                }));\n\n                //Get Customer Info\n                var serviceDataForCompany = {\n                    xCustomerId: data.xCustomerId\n                }\n                this.props.dispatch(client(serviceDataForCompany, (data) => {\n                    this.setState({\n                        companyName: data.companyName,\n                        originator: data.originator,\n                        limit: data.limit\n                    });\n                }, () => {\n                    this.props.dispatch(dispatchItem(\"NOTIFICATION\", { message: 'Müşeri bulunamadı!', isError: true }));\n                    this.props.history.push('/xivodafone/report');\n                }));\n\n            }, () => {\n                this.props.dispatch(dispatchItem(\"NOTIFICATION\", { message: 'Bir hata oluştu!', isError: true }));\n                this.props.history.push('/xivodafone/report');\n            }));\n        }\n        else {\n            //Get Query Info\n            var serviceDataForQuery = {\n                queryId: this.state.queryId\n            }\n            this.props.dispatch(query(serviceDataForQuery, (data) => {\n                this.setState({\n                    queryName: data.queryName\n                });\n                \n                var serviceDataForTarget = {};\n                serviceDataForTarget[\"params\"] = data.queryParam;\n                this.props.dispatch(findTargetQuery(serviceDataForTarget, (data) => {\n                    this.setState({\n                        personCount: data.count\n                    });\n                }, () => {\n                }));\n            }, () => {\n                this.props.dispatch(dispatchItem(\"NOTIFICATION\", { message: 'Sorgu bulunamadı!', isError: true }));\n                this.props.history.push('/xivodafone/query/list');\n            }));\n            \n            //Get Customer Info\n            var serviceDataForCompany = {\n                xCustomerId: this.state.companyId\n            }\n            this.props.dispatch(client(serviceDataForCompany, (data) => {\n                this.setState({\n                    companyName: data.companyName,\n                    originator: data.originator,\n                    limit: data.limit\n                });\n            }, () => {\n                this.props.dispatch(dispatchItem(\"NOTIFICATION\", { message: 'Müşeri bulunamadı!', isError: true }));\n                this.props.history.push('/xivodafone/query/list');\n            }));\n        }\n    }\n\n    onInputChange(model, name) {\n        if(name == 'broadcastMessage') {\n            var broadcastMessage = model[\"broadcastMessage\"].value;\n            var currentSmsCount = calculateSmsLength(broadcastMessage, true);\n            this.setState({\n                currentSmsCount: currentSmsCount\n            });\n        }\n    }\n\n    handleSubmit(data, isSecondButton)\n    {\n        var smsLength = maximumSmsLength(data.broadcastMessage, true);\n        if(data.broadcastMessage.length > smsLength)\n        {\n            var notification = {\n                isError: true,\n                message: 'Göndereceğiniz SMS maksimum ' + smsLength + ' uzunluğunda olabilir, şuanda ' + data.broadcastMessage.length + 'uzulunğunda.'\n            }\n            this.props.dispatch(dispatchItem(\"NOTIFICATION\", notification));\n        }\n        else if(data.sendCount > Math.floor(this.state.limit / this.state.currentSmsCount))\n        {\n            var notification = {\n                isError: true,\n                message: Math.floor(this.state.limit / this.state.currentSmsCount) + ' SMS boyutunda bir metin girildiği için en fazla ' + Math.floor(this.state.limit / this.state.currentSmsCount) + ' adedinde kişiye gönderim yapılabilir.'\n            }\n            this.props.dispatch(dispatchItem(\"NOTIFICATION\", notification));\n        }\n        else {\n\n            var sendTimeHour = data.sendTime.split(':')[0];\n            var sendTimeMinute = data.sendTime.split(':')[1];\n            var latestSendTimeHour = data.latestSendTime.split(':')[0];\n            var latestSendTimeMinute = data.latestSendTime.split(':')[1];\n\n            if((isSecondButton=false) && (sendTimeHour < 9 || (sendTimeHour > 20 && sendTimeMinute > 0) || latestSendTimeHour < 9 || (latestSendTimeHour > 20 && latestSendTimeMinute > 0)))\n            {\n                var notification = {\n                    isError: true,\n                    message: 'En erken ve en geç gönderim zamanları için lütfen 09:00 ile 20:00 arasında bir zaman seçiniz.'\n                }\n                this.props.dispatch(dispatchItem(\"NOTIFICATION\", notification));\n            }\n            else {\n\n                if(isSecondButton=true){\n\n                    var today = new Date();\n\n                    var month = (\"0\" + (today.getMonth() + 1)).slice(-2)\n                    var date = (\"0\" + today.getDate()).slice(-2);\n                    var hour = (\"0\" + today.getHours).slice(-2);\n                    var minutes = (\"0\" + today.getMinutes).slice(-2);\n            \n                    var serviceData = {\n                        broadcastMessage: data.broadcastMessage,\n                        campaignName: data.campaignName,\n                        sendCount: data.sendCount,\n                        sendDate: date + \"\" + month + \"\" + today.getFullYear() + \" \" + hour + ':' + minutes,\n                        xCustomerId: this.state.companyId,\n                        queryId: this.state.queryId,\n                        receiver: data.testSmsNumber\n                    };\n                }\n                else{\n\n                var serviceData = {\n                    broadcastMessage: data.broadcastMessage,\n                    campaignName: data.campaignName,\n                    sendCount: data.sendCount,\n                    sendDate: data.sendDate + \" \" + data.sendTime,\n                    latestSendDate: data.latestSendDate + \" \" + data.latestSendTime,\n                    xCustomerId: this.state.companyId,\n                    queryId: this.state.queryId\n                    };\n                }\n                if(data.uniqueCodeFile)\n                {\n                    serviceData[\"uniqueCodeFile\"] = data.uniqueCodeFile;\n                    serviceData[\"uniqueCodeLength\"] = data.uniqueCodeLength;\n                }\n\n                if(this.state.sendId) {\n                    serviceData[\"requestId\"] = this.state.sendId;\n                }\n        \n                var serviceDataForm = new FormData();\n                for (var key in serviceData) {\n                    serviceDataForm.append(key, serviceData[key]);\n                }\n                \n                    if(isSecondButton)\n                    {\n                    this.props.dispatch(testSmsQuery(serviceDataForm, (data) => {\n                        this.props.dispatch(dispatchItem(\"NOTIFICATION\", { message: 'Test SMS\\'i gönderildi.', isError: false }));\n                    }, () => {\n        \n                    }));\n                    }\n                    else {\n                        if(this.state.sendId) {\n                        this.props.dispatch(sendEdit(serviceDataForm, (data) => {\n                            this.props.history.push('/xivodafone/query/send/success');\n                        }, () => {\n            \n                        }));\n\n                        }\n                        else {\n                        this.props.dispatch(sendQuery(serviceDataForm, (data) => {\n                            this.props.history.push('/xivodafone/query/send/success');\n                        }, () => {\n            \n                        }));\n                        }\n                    }\n            \n            }\n        }\n    }\n    \n    render() {\n        return (\n            <section className=\"panel\">\n                <Message />\n                <div className=\"container\">\n                    <div className=\"left only-desktop\">\n                        <div className=\"header\">\n                            <div className=\"title\">\n                                Sorgu Detayları\n                            </div>\n                            {!this.state.sendId &&\n                                <Link id=\"setup-edit\" className=\"link\" to={\"/xivodafone/query/edit/\" + this.state.queryId + \"/\" + this.state.companyId}>\n                                    <img src={require(\"../../../assets/icons/icon-edit.svg\")} aria-hidden=\"true\" />\n                                    <span>Düzenle</span>\n                                </Link>\n                            }\n                        </div>\n                        <div className=\"user-sms-choosen\">\n                            <div className=\"text\">\n                                Aşağıdaki sorgu sonuçlarından oluşan gruba yazdığınız mesaj gönderilecek.\n                            </div>\n                        </div>\n                        <div className=\"items\">\n                            <div className=\"item-container\">\n                                <div className=\"item\">\n                                    <div>Sorgu İsmi</div>\n                                    <div>{this.state.queryName}</div>\n                                </div>\n                                <div className=\"item\">\n                                    <div>Müşteri</div>\n                                    <div>{this.state.companyName}</div>\n                                </div>\n                                <div className=\"item\">\n                                    <div>Kişi Sayısı</div>\n                                    <div>{this.state.personCount}</div>\n                                </div>\n                                <div className=\"item\">\n                                    <div>Originator</div>\n                                    <div>{this.state.originator}</div>\n                                </div>\n                                <div className=\"item\">\n                                    <div>SMS Hakkı</div>\n                                    <div>{Math.floor(this.state.limit / this.state.currentSmsCount)}</div>\n                                </div>\n                            </div>\n                            <div className=\"description\">\n                                <div className=\"title-default\">\n                                    Dikkat Edilmesi Gereken Noktalar:\n                                </div>\n                                <div className=\"text-default font\">\n                                    <ul>\n                                        <li>\n                                            Çıkış metni otomatik eklenecektir. Eklemenize gerek yoktur.\n                                        </li>\n                                        <li>\n                                            Unique kod varsa &#123;&#35;&#125; olarak metinde belirtilmelidir.\n                                        </li>\n                                        <li>\n                                            Sadece Vodafonelulara özel verilecek bir fayda olmalıdır.\n                                        </li>\n                                        <li>\n                                            Unique kod karakter sayısına dahildir.\n                                        </li>\n                                        <li>\n                                            1 SMS 160 karakterdir, karakter sayısı arttıkça bakiyeden SMS eşdeğeri kadar düşer. \n                                        </li>\n                                        <li>\n                                            Bir link veriliyorsa, linkin gittiği websitesinde de Vodafonelulara özel fayda vurgulanmalıdır.\n                                        </li>\n                                        <li>\n                                            Unique kod varsa &#123;&#35;&#125; olarak metinde belirtilmelidir.\n                                        </li>\n                                        <li>\n                                            Test numarası girilirken numara formatı: 905XXXXXXXXX\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"right\">\n                        <div className=\"header\">\n                            <div className=\"title-default\">\n                                <span>Gönderim Detayları</span>\n                            </div>\n                        </div>\n                        <div className=\"user-sms-details\">\n                            <div className=\"form-container\">\n                                <Form model={this.state.formModel} formId={\"query-send-form\"} onInputChange={this.onInputChange} handleSubmit={this.handleSubmit} buttonText={\"Onaya Gönder\"} buttonId={\"query-sms-send\"} secondButtonText={\"Test SMS'i Gönder\"} secondButtonId={\"query-sms-test\"} secondButtonExtraClass={\"link\"} />\n                            </div>\n                        </div>\n                    </div>\n                </div>     \n            </section>\n      );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        app: state.app \n    }\n}\n\nexport default withRouter(connect(mapStateToProps)(QuerySend))"]},"metadata":{},"sourceType":"module"}