"use strict";

exports.__esModule = true;
exports.mergeWithDefaults = mergeWithDefaults;
exports.default = void 0;

var _invariant = _interopRequireDefault(require("invariant"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var notImplemented = function notImplemented() {
  return new Error('ReactWidgets Localizer: Not implemented');
};

var checkDateFormats;
var checkNumberFormats;

if (process.env.NODE_ENV !== 'production') {
  checkDateFormats = function checkDateFormats(formats) {
    if (formats) ['date', 'time', 'datetime', 'header', 'footer', 'weekday', 'dayOfMonth', 'month', 'year', 'decade', 'century'].forEach(function (f) {
      return !(f in formats) ? process.env.NODE_ENV !== "production" ? (0, _invariant.default)(false, "localizer missing required format: `" + f + "`") : invariant(false) : void 0;
    });
  };

  checkNumberFormats = function checkNumberFormats(formats) {
    if (formats) ['default'].forEach(function (f) {
      return !(f in formats) ? process.env.NODE_ENV !== "production" ? (0, _invariant.default)(false, "localizer missing required format: `" + f + "`") : invariant(false) : void 0;
    });
  };
}

var localePropType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]);

function mergeWithDefaults(localizer, formatOverrides, messages) {
  return _extends({}, localizer, {
    messages: messages,
    parseDate: function parseDate(value, format) {
      return localizer.parseDate(value, formatOverrides[format] || localizer.dateFormats[format] || format);
    },
    formatDate: function formatDate(value, format) {
      return localizer.formatDate(value, formatOverrides[format] || localizer.dateFormats[format] || format);
    },
    formatNumber: function formatNumber(value, format) {
      return localizer.formatNumber(value, formatOverrides[format] || localizer.numberFormats[format] || format);
    }
  });
}

var Localizer =
/*#__PURE__*/
function () {
  function Localizer(_ref) {
    var dateFormats = _ref.dateFormats,
        numberFormats = _ref.numberFormats,
        propType = _ref.propType;

    if (process.env.NODE_ENV !== 'production') {
      checkDateFormats(dateFormats);
      checkNumberFormats(numberFormats);
    }

    this.propType = propType || localePropType;
    this.numberFormats = numberFormats;
    this.dateFormats = dateFormats;
    this.firstOfWeek = 0;
  }

  var _proto = Localizer.prototype;

  _proto._formatDate = function _formatDate() {
    throw notImplemented();
  };

  _proto._formatNumber = function _formatNumber() {
    throw notImplemented();
  };

  _proto.formatDate = function formatDate(date, format) {
    return typeof format === 'function' ? format(date, this) : this._formatDate(date, format);
  };

  _proto.parseDate = function parseDate() {
    throw notImplemented();
  };

  _proto.formatNumber = function formatNumber(number, format) {
    return typeof format === 'function' ? format(number, this) : this._formatNumber(number, format);
  };

  _proto.parseNumber = function parseNumber() {
    throw notImplemented();
  };

  _proto.decimalChar = function decimalChar() {
    return '.';
  };

  _proto.precision = function precision() {
    return null;
  };

  return Localizer;
}();

exports.default = Localizer;