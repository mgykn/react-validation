"use strict";

exports.__esModule = true;
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _transition = _interopRequireDefault(require("dom-helpers/transition"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var DirectionPropType = _propTypes.default.oneOf(['left', 'right', 'top', 'bottom']);

var prefix = 'rw-calendar-transition';
var active = prefix + "-active";
var next = prefix + "-next";
var prev = prefix + "-prev";

var clone = function clone(el, cls) {
  return el && _react.default.cloneElement(el, {
    className: (0, _classnames.default)(el.props.className, prefix, cls)
  });
};

var SlideTransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(SlideTransitionGroup, _React$Component);

  function SlideTransitionGroup() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handleTransitionEnd = function (hadFocus) {
      _this.isTransitioning = false;
      var current = _this.container.current.lastChild;
      if (_this.props.onTransitionEnd) _this.props.onTransitionEnd(current, hadFocus);
    };

    _this.current = _this.props.children;
    _this.container = _react.default.createRef();
    _this.state = {
      prevClasses: '',
      currentClasses: ''
    };
    return _this;
  }

  var _proto = SlideTransitionGroup.prototype;

  _proto.componentDidUpdate = function componentDidUpdate() {
    var _this2 = this;

    if (!this.flush || this.isTransitioning) return;
    this.flush = false;
    this.isTransitioning = true;
    var previous = this.container.current.firstChild;
    var hadFocus = document.activeElement && previous.contains(document.activeElement);
    this.setState({
      prevClasses: '',
      currentClasses: next
    }, function () {
      var current = _this2.container.current.lastChild;
      current.clientHeight; // eslint-disable-line

      _this2.setState({
        prevClasses: prev,
        currentClasses: (0, _classnames.default)(next, active)
      }, function () {
        _transition.default.end(current, function () {
          _this2.prev = null;

          if (_this2.current.key !== _this2.props.children.key) {
            _this2.current = _this2.props.children;
          }

          _this2.setState({
            prevClasses: '',
            currentClasses: ''
          }, function () {
            return _this2.handleTransitionEnd(hadFocus);
          });
        });
      });
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        direction = _this$props.direction,
        children = _this$props.children,
        _ = _this$props.onTransitionEnd,
        props = _objectWithoutPropertiesLoose(_this$props, ["direction", "children", "onTransitionEnd"]);

    if (!this.isTransitioning) {
      if (this.current.key !== children.key) {
        this.prev = this.current;
        this.flush = true;
      }

      this.current = children;
    }

    var _this$state = this.state,
        prevClasses = _this$state.prevClasses,
        currentClasses = _this$state.currentClasses;
    return _react.default.createElement("div", _extends({}, props, {
      ref: this.container,
      className: (0, _classnames.default)(prefix + "-group", prefix + "-" + direction)
    }), clone(this.prev, prevClasses), clone(this.current, currentClasses));
  };

  return SlideTransitionGroup;
}(_react.default.Component);

SlideTransitionGroup.defaultProps = {
  direction: 'left'
};
SlideTransitionGroup.propTypes = {
  direction: DirectionPropType,
  onTransitionEnd: _propTypes.default.func
};
var _default = SlideTransitionGroup;
exports.default = _default;
module.exports = exports["default"];