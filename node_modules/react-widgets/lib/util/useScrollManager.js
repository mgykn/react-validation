"use strict";

exports.__esModule = true;
exports.default = useScrollManager;

var _react = require("react");

var _scrollTo = _interopRequireDefault(require("dom-helpers/util/scrollTo"));

var _useMounted = _interopRequireDefault(require("@restart/hooks/useMounted"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useScrollManager(ref, onMove, getScrollParent) {
  if (getScrollParent === void 0) {
    getScrollParent = function getScrollParent(list) {
      return list.parentNode;
    };
  }

  var isMounted = (0, _useMounted.default)();
  var stateBagRef = (0, _react.useRef)({});

  function handleScroll(selected, list, nextFocused) {
    if (!isMounted()) return;
    var stateBag = stateBagRef.current;
    var lastVisible = stateBag.currentVisible;
    var lastItem = stateBag.currentFocused;
    var shown, changed;
    stateBag.currentVisible = !(!list.offsetWidth || !list.offsetHeight);
    stateBag.currentFocused = nextFocused;
    changed = lastItem !== nextFocused;
    shown = stateBag.currentVisible && !lastVisible;

    if (shown || stateBag.currentVisible && changed) {
      if (onMove) onMove(selected, list, nextFocused);else {
        if (stateBag.cancelScroll) stateBag.cancelScroll();
        stateBag.cancelScroll = (0, _scrollTo.default)(selected, false && getScrollParent(list));
      }
    }
  }

  return handleScroll;
}

module.exports = exports["default"];