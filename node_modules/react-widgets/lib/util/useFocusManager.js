"use strict";

exports.__esModule = true;
exports.default = useFocusManager;

var _react = require("react");

var _useMounted = _interopRequireDefault(require("@restart/hooks/useMounted"));

var _useFocusManager = _interopRequireDefault(require("@restart/hooks/useFocusManager"));

var _interaction = require("./interaction");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function useFocusManager(ref, props, opts) {
  if (props === void 0) {
    props = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  var isMounted = (0, _useMounted.default)();

  var _useState = (0, _react.useState)(false),
      focused = _useState[0],
      setFocus = _useState[1];

  var events = (0, _useFocusManager.default)(_extends({}, opts, {
    onChange: function onChange(focused) {
      if (isMounted()) setFocus(focused);
    },
    isDisabled: function isDisabled() {
      return props.disabled === true || (0, _interaction.isInDisabledFieldset)(ref.current);
    },
    didHandle: function didHandle(focused, event) {
      var handler = props[focused ? 'onFocus' : 'onBlur'];
      if (handler) handler(event);
      if (opts.didHandle && !event.isWidgetDefaultPrevented) opts.didHandle(focused, event);
    }
  }));
  return [events, focused, setFocus];
}

module.exports = exports["default"];