"use strict";

exports.__esModule = true;
exports.useAutoFocus = useAutoFocus;
exports.useDropodownToggle = useDropodownToggle;
exports.useList = useList;
exports.useFilteredData = useFilteredData;
exports.useFocusedItem = useFocusedItem;
exports.CREATE_OPTION = void 0;

var _react = require("react");

var _reduceToListState = _interopRequireDefault(require("./reduceToListState"));

var _Filter = require("./Filter");

var _widgetHelpers = require("./widgetHelpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CREATE_OPTION = {};
exports.CREATE_OPTION = CREATE_OPTION;

function useAutoFocus(autoFocus, ref) {
  (0, _react.useEffect)(function () {
    if (autoFocus) ref.current.focus();
  }, []);
}

function useDropodownToggle(isOpen, onToggle) {
  function open() {
    if (!isOpen) (0, _widgetHelpers.notify)(onToggle, true);
  }

  function close() {
    if (isOpen) (0, _widgetHelpers.notify)(onToggle, false);
  }

  function toggle() {
    if (isOpen) close();else open();
  }

  toggle.open = open;
  toggle.close = close;
  return toggle;
}

function useList(data, options) {
  var prev = (0, _react.useRef)();
  var list = (0, _reduceToListState.default)(data, prev.current, options);
  prev.current = list;
  return list;
}

function useFilteredData(value, data, filterer, searchTerm, minLength, caseSensitive, textAccessor) {
  return (0, _react.useMemo)(function () {
    return (0, _Filter.filter)(data, {
      searchTerm: searchTerm,
      minLength: minLength,
      caseSensitive: caseSensitive,
      filter: filterer,
      textField: textAccessor
    });
  }, [data, _Filter.filter, searchTerm, minLength, caseSensitive, textAccessor]);
}

function useFocusedItem(selectedItem, data, list, defaultItem) {
  if (defaultItem === void 0) {
    defaultItem = data[0];
  }

  var ref = (0, _react.useRef)(null);
  var prevSelected = ref.current;
  ref.current = selectedItem; // Focused item defaults the first when nothing is selected

  var startItem = selectedItem !== undefined ? selectedItem : defaultItem;

  var _useState = (0, _react.useState)(function () {
    return (// nextEnabled in case the first or selected item is disabled
      list.nextEnabled(startItem)
    );
  }),
      focusedItem = _useState[0],
      setItem = _useState[1];

  var isCreateItem = focusedItem === CREATE_OPTION; // if the selectedItem has changed we reset the focusedItem to it

  if (prevSelected !== selectedItem) {
    setItem(selectedItem ? list.nextEnabled(selectedItem) : startItem);
  } // if the current focused item is no longer in the array (e.g. filtered out)
  // reset it to the first enabled item
  else if (!isCreateItem && data.indexOf(focusedItem) === -1) {
      var nextItem = list.nextEnabled(defaultItem);
      if (nextItem !== focusedItem) setItem(nextItem);
    }

  return [focusedItem, setItem];
}