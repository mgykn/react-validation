"use strict";

exports.__esModule = true;
exports.default = void 0;

var _invariant = _interopRequireDefault(require("invariant"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Input = _interopRequireDefault(require("./Input"));

var CustomPropTypes = _interopRequireWildcard(require("./util/PropTypes"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  format: CustomPropTypes.dateFormat.isRequired,
  editing: _propTypes.default.bool,
  editFormat: CustomPropTypes.dateFormat,
  parse: _propTypes.default.any,
  value: _propTypes.default.instanceOf(Date),
  onChange: _propTypes.default.func.isRequired,
  onBlur: _propTypes.default.func,
  localizer: _propTypes.default.object.isRequired,
  disabled: CustomPropTypes.disabled,
  readOnly: CustomPropTypes.disabled
};

var DateTimePickerInput = _react.default.forwardRef(function (_ref, ref) {
  var value = _ref.value,
      editing = _ref.editing,
      editFormat = _ref.editFormat,
      format = _ref.format,
      localizer = _ref.localizer,
      parse = _ref.parse,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      disabled = _ref.disabled,
      readOnly = _ref.readOnly,
      props = _objectWithoutPropertiesLoose(_ref, ["value", "editing", "editFormat", "format", "localizer", "parse", "onChange", "onBlur", "disabled", "readOnly"]);

  var needsFlush = (0, _react.useRef)(false);
  var nextTextValue = (0, _react.useMemo)(function () {
    return value instanceof Date && isValid(value) ? localizer.formatDate(value, format) : '';
  }, [value, localizer, editing && editFormat ? editFormat : format]);
  var lastValueFromProps = (0, _react.useRef)(nextTextValue);

  var _useState = (0, _react.useState)(nextTextValue),
      textValue = _useState[0],
      setTextValue = _useState[1];

  if (lastValueFromProps.current !== nextTextValue) {
    lastValueFromProps.current = nextTextValue;
    setTextValue(nextTextValue);
  }

  var parseStringInput = function parseStringInput(string) {
    !(parse || format || editFormat) ? process.env.NODE_ENV !== "production" ? (0, _invariant.default)(false, 'React Widgets: there are no specified `parse` formats provided and the `format` prop is a function. ' + 'the DateTimePicker is unable to parse `%s` into a dateTime, ' + 'please provide either a parse function or localizer compatible `format` prop', string) : invariant(false) : void 0;
    var date;
    var checkFormats = [format, editFormat];

    if (typeof parse == 'function') {
      date = parse(string);
      if (date) return date;
    } else {
      // parse is a string format or array of string formats
      checkFormats = checkFormats.concat(parse).filter(Boolean);
    }

    for (var _iterator = checkFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref2 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref2 = _i.value;
      }

      var f = _ref2;
      date = localizer.parseDate(string, f);
      if (date) return date;
    }

    return null;
  };

  var handleBlur = function handleBlur(event) {
    if (onBlur) onBlur(event);

    if (needsFlush.current) {
      var date = parseStringInput(event.target.value);
      var dateIsInvalid = event.target.value != '' && date == null;

      if (dateIsInvalid) {
        setTextValue('');
      }

      needsFlush.current = false;
      onChange(date, event.target.value);
    }
  };

  var handleChange = function handleChange(_ref3) {
    var value = _ref3.target.value;
    needsFlush.current = true;
    setTextValue(value);
  };

  return _react.default.createElement(_Input.default, _extends({}, props, {
    type: "text",
    ref: ref,
    className: "rw-widget-input",
    value: textValue,
    disabled: disabled,
    readOnly: readOnly,
    onChange: handleChange,
    onBlur: handleBlur
  }));
});

DateTimePickerInput.displayName = 'DateTimePickerInput';
DateTimePickerInput.propTypes = propTypes;
var _default = DateTimePickerInput;
exports.default = _default;

function isValid(d) {
  return !isNaN(d.getTime());
}

module.exports = exports["default"];