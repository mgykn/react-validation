"use strict";

exports.__esModule = true;
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _hook = _interopRequireDefault(require("uncontrollable/hook"));

var _Widget = _interopRequireDefault(require("./Widget"));

var _WidgetPicker = _interopRequireDefault(require("./WidgetPicker"));

var _Select = _interopRequireDefault(require("./Select"));

var _NumberInput = _interopRequireDefault(require("./NumberInput"));

var _Button = _interopRequireDefault(require("./Button"));

var _LocalizationProvider = _interopRequireDefault(require("./LocalizationProvider"));

var _interaction = require("./util/interaction");

var _useFocusManager2 = _interopRequireDefault(require("./util/useFocusManager"));

var _widgetHelpers = require("./util/widgetHelpers");

var CustomPropTypes = _interopRequireWildcard(require("./util/PropTypes"));

var _Icon = require("./Icon");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// my tests in ie11/chrome/FF indicate that keyDown repeats
// at about 35ms+/- 5ms after an initial 500ms delay. callback fires on the leading edge
function createInterval(callback) {
  var _fn;

  var id,
      cancel = function cancel() {
    return clearTimeout(id);
  };

  id = setTimeout(_fn = function fn() {
    id = setTimeout(_fn, 35);
    callback(); //fire after everything in case the user cancels on the first call
  }, 500);
  return cancel;
}

function clamp(value, min, max) {
  max = max == null ? Infinity : max;
  min = min == null ? -Infinity : min;
  if (value == null || value === '') return null;
  return Math.max(Math.min(value, max), min);
}

var propTypes = {
  value: _propTypes.default.number,

  /**
   * @example ['onChangePicker', [ [1, null] ]]
   */
  onChange: _propTypes.default.func,

  /**
   * The minimum number that the NumberPicker value.
   * @example ['prop', ['min', 0]]
   */
  min: _propTypes.default.number,

  /**
   * The maximum number that the NumberPicker value.
   *
   * @example ['prop', ['max', 0]]
   */
  max: _propTypes.default.number,

  /**
   * Amount to increase or decrease value when using the spinner buttons.
   *
   * @example ['prop', ['step', 5]]
   */
  step: _propTypes.default.number,

  /**
   * Specify how precise the `value` should be when typing, incrementing, or decrementing the value.
   * When empty, precision is parsed from the current `format` and culture.
   */
  precision: _propTypes.default.number,
  formats: _propTypes.default.shape({
    /**
     * A format string used to display the number value. Localizer dependent, read [localization](../localization) for more info.
     *
     * @example ['prop', { max: 1, min: -1 , defaultValue: 0.2585, format: "{ style: 'percent' }" }]
     */
    default: CustomPropTypes.numberFormat
  }),

  /**
   * Determines how the NumberPicker parses a number from the localized string representation.
   * You can also provide a parser `function` to pair with a custom `format`.
   */
  parse: _propTypes.default.func,
  incrementIcon: _propTypes.default.node,
  decrementIcon: _propTypes.default.node,

  /** @ignore */
  tabIndex: _propTypes.default.any,
  name: _propTypes.default.string,
  placeholder: _propTypes.default.string,
  onKeyDown: _propTypes.default.func,
  onKeyPress: _propTypes.default.func,
  onKeyUp: _propTypes.default.func,
  autoFocus: _propTypes.default.bool,

  /**
   * @example ['disabled', ['1']]
   */
  disabled: CustomPropTypes.disabled,

  /**
   * @example ['readOnly', ['1.5']]
   */
  readOnly: CustomPropTypes.disabled,

  /** Adds a css class to the input container element. */
  containerClassName: _propTypes.default.string,
  inputProps: _propTypes.default.object,
  isRtl: _propTypes.default.bool,
  messages: _propTypes.default.shape({
    increment: _propTypes.default.string,
    decrement: _propTypes.default.string
  }),

  /** @ignore */
  localizer: _propTypes.default.object
};
var defaultProps = {
  incrementIcon: _Icon.caretUp,
  decrementIcon: _Icon.caretDown,
  min: -Infinity,
  max: Infinity,
  step: 1
  /**
   * ---
   * localized: true
   * shortcuts:
   *   - { key: down arrow, label: decrement value }
   *   - { key: up arrow, label: increment value }
   *   - { key: home, label: set value to minimum value, if finite }
   *   - { key: end, label: set value to maximum value, if finite }
   * ---
   *
   * @public
   */

};

function NumberPicker(uncontrolledProps) {
  var _useUncontrolled = (0, _hook.default)(uncontrolledProps, {
    value: 'onChange'
  }),
      className = _useUncontrolled.className,
      containerClassName = _useUncontrolled.containerClassName,
      disabled = _useUncontrolled.disabled,
      readOnly = _useUncontrolled.readOnly,
      value = _useUncontrolled.value,
      min = _useUncontrolled.min,
      max = _useUncontrolled.max,
      incrementIcon = _useUncontrolled.incrementIcon,
      decrementIcon = _useUncontrolled.decrementIcon,
      placeholder = _useUncontrolled.placeholder,
      autoFocus = _useUncontrolled.autoFocus,
      tabIndex = _useUncontrolled.tabIndex,
      parse = _useUncontrolled.parse,
      name = _useUncontrolled.name,
      onChange = _useUncontrolled.onChange,
      messages = _useUncontrolled.messages,
      formats = _useUncontrolled.formats,
      onKeyDown = _useUncontrolled.onKeyDown,
      onKeyPress = _useUncontrolled.onKeyPress,
      onKeyUp = _useUncontrolled.onKeyUp,
      inputProps = _useUncontrolled.inputProps,
      precision = _useUncontrolled.precision,
      pStep = _useUncontrolled.step,
      elementProps = _objectWithoutPropertiesLoose(_useUncontrolled, ["className", "containerClassName", "disabled", "readOnly", "value", "min", "max", "incrementIcon", "decrementIcon", "placeholder", "autoFocus", "tabIndex", "parse", "name", "onChange", "messages", "formats", "onKeyDown", "onKeyPress", "onKeyUp", "inputProps", "precision", "step"]);

  var localizer = _LocalizationProvider.default.useLocalizer(messages, formats);

  var ref = (0, _react.useRef)();
  var inputRef = (0, _react.useRef)();
  var repeaterRef = (0, _react.useRef)();

  var _useFocusManager = (0, _useFocusManager2.default)(ref, uncontrolledProps, {
    willHandle: function willHandle(focused) {
      if (focused) focus();
    }
  }),
      focusEvents = _useFocusManager[0],
      focused = _useFocusManager[1];

  var useEditableCallback = (0, _interaction.createEditableCallback)(disabled || readOnly, ref);
  var handleMouseDown = useEditableCallback(function (direction, event) {
    if (event) event.persist();
    var method = direction === 'UP' ? increment : decrement;
    var value = method(event),
        atTop = direction === 'UP' && value === max,
        atBottom = direction === 'DOWN' && value === min;
    if (atTop || atBottom) handleMouseUp();else if (!repeaterRef.current) {
      repeaterRef.current = createInterval(function () {
        handleMouseDown(direction, event);
      });
    }
  }); // @widgetEditable

  var handleMouseUp = useEditableCallback(function () {
    if (!repeaterRef.current) return;
    repeaterRef.current();
    repeaterRef.current = null;
  }); // @widgetEditable

  var handleKeyDown = useEditableCallback(function (event) {
    var key = event.key;
    (0, _widgetHelpers.notify)(onKeyDown, [event]);
    if (event.defaultPrevented) return;
    if (key === 'End' && isFinite(max)) handleChange(max, event);else if (key === 'Home' && isFinite(min)) handleChange(min, event);else if (key === 'ArrowDown') {
      event.preventDefault();
      decrement(event);
    } else if (key === 'ArrowUp') {
      event.preventDefault();
      increment(event);
    }
  });

  var handleChange = function handleChange(rawValue, originalEvent) {
    if (originalEvent === void 0) {
      originalEvent = null;
    }

    var nextValue = clamp(rawValue, min, max);
    if (value !== nextValue) (0, _widgetHelpers.notify)(onChange, [nextValue, {
      rawValue: rawValue,
      originalEvent: originalEvent,
      lastValue: value
    }]);
  };

  function focus() {
    var _inputRef$current;

    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
  }

  function increment(event) {
    return step(pStep, event);
  }

  function decrement(event) {
    return step(-pStep, event);
  }

  function step(amount, event) {
    var nextValue = (value || 0) + amount;
    var decimals = precision != null ? precision : localizer.precision();
    handleChange(decimals != null ? round(nextValue, decimals) : nextValue, event);
    return nextValue;
  }

  var clampedValue = clamp(value, min, max);
  return _react.default.createElement(_Widget.default, _extends({}, elementProps, {
    focused: focused,
    disabled: disabled,
    readOnly: readOnly,
    onKeyDown: handleKeyDown
  }, focusEvents, {
    ref: ref,
    className: (0, _classnames.default)(className, 'rw-number-picker')
  }), _react.default.createElement(_WidgetPicker.default, {
    className: containerClassName
  }, _react.default.createElement(_NumberInput.default, _extends({}, inputProps, {
    role: "spinbutton",
    tabIndex: tabIndex,
    value: clampedValue,
    placeholder: placeholder,
    autoFocus: autoFocus,
    editing: focused,
    localizer: localizer,
    parse: parse,
    name: name,
    min: min,
    max: max,
    disabled: disabled,
    readOnly: readOnly,
    onChange: handleChange,
    onKeyPress: onKeyPress,
    onKeyUp: onKeyUp,
    innerRef: inputRef
  })), _react.default.createElement(_Select.default, {
    bordered: true
  }, _react.default.createElement(_Button.default, {
    icon: incrementIcon,
    disabled: clampedValue === max || disabled,
    label: localizer.messages.increment({
      value: clampedValue,
      min: min,
      max: max
    }),
    onMouseUp: function onMouseUp(e) {
      return handleMouseUp('UP', e);
    },
    onMouseDown: function onMouseDown(e) {
      return handleMouseDown('UP', e);
    },
    onMouseLeave: function onMouseLeave(e) {
      return handleMouseUp('UP', e);
    }
  }), _react.default.createElement(_Button.default, {
    icon: decrementIcon,
    disabled: clampedValue === min || disabled,
    label: localizer.messages.decrement({
      value: clampedValue,
      min: min,
      max: max
    }),
    onMouseUp: function onMouseUp(e) {
      return handleMouseUp('DOWN', e);
    },
    onMouseDown: function onMouseDown(e) {
      return handleMouseDown('DOWN', e);
    },
    onMouseLeave: function onMouseLeave(e) {
      return handleMouseUp('DOWN', e);
    }
  }))));
}

NumberPicker.propTypes = propTypes;
NumberPicker.defaultProps = defaultProps;
var _default = NumberPicker; // thank you kendo ui core
// https://github.com/telerik/kendo-ui-core/blob/master/src/kendo.core.js#L1036

exports.default = _default;

function round(value, precision) {
  precision = precision || 0;
  value = ('' + value).split('e');
  value = Math.round(+(value[0] + 'e' + (value[1] ? +value[1] + precision : precision)));
  value = ('' + value).split('e');
  value = +(value[0] + 'e' + (value[1] ? +value[1] - precision : -precision));
  return value.toFixed(precision);
}

module.exports = exports["default"];