"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dates = _interopRequireDefault(require("./util/dates"));

var _useFocusManager2 = _interopRequireDefault(require("./util/useFocusManager"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var VIEW_UNITS = ['month', 'year', 'decade', 'century'];

function clamp(date, min, max) {
  return _dates.default.max(_dates.default.min(date, max), min);
}

var viewPropTypes = {
  focusedItem: _propTypes.default.any,
  onKeyDown: _propTypes.default.func,
  'aria-labelledby': _propTypes.default.string
};

function CalendarView(_ref) {
  var className = _ref.className,
      focusedItem = _ref.focusedItem,
      onKeyDown = _ref.onKeyDown,
      children = _ref.children,
      labelledby = _ref['aria-labelledby'];
  var ref = (0, _react.useRef)(null);

  var _useFocusManager = (0, _useFocusManager2.default)(ref),
      focusEvents = _useFocusManager[0],
      focused = _useFocusManager[1];

  (0, _react.useEffect)(function () {
    var node = ref.current;
    if (!node || !focused) return;
    node.querySelector('.rw-cell[tabindex]').focus();
  }, [focusedItem, focused, ref]);
  return _react.default.createElement("table", _extends({
    role: "grid",
    ref: ref,
    tabIndex: "-1"
  }, focusEvents, {
    onKeyDown: onKeyDown,
    "aria-labelledby": labelledby,
    className: (0, _classnames.default)(className, 'rw-nav-view', 'rw-calendar-grid')
  }), children);
}

CalendarView.propTypes = viewPropTypes;
var cellPropTypes = {
  id: _propTypes.default.string,
  label: _propTypes.default.string,
  now: _propTypes.default.instanceOf(Date),
  date: _propTypes.default.instanceOf(Date),
  selected: _propTypes.default.instanceOf(Date),
  focusedItem: _propTypes.default.instanceOf(Date),
  min: _propTypes.default.instanceOf(Date),
  max: _propTypes.default.instanceOf(Date),
  unit: _propTypes.default.oneOf(['day'].concat(VIEW_UNITS)),
  viewUnit: _propTypes.default.oneOf(VIEW_UNITS),
  onChange: _propTypes.default.func.isRequired,
  disabled: _propTypes.default.bool
};

function CalendarViewCell(_ref2) {
  var onChange = _ref2.onChange,
      now = _ref2.now,
      min = _ref2.min,
      max = _ref2.max,
      date = _ref2.date,
      unit = _ref2.unit,
      disabled = _ref2.disabled,
      selected = _ref2.selected,
      focusedItem = _ref2.focusedItem,
      viewUnit = _ref2.viewUnit,
      children = _ref2.children,
      label = _ref2.label;

  var isEqual = function isEqual(nextDate) {
    return _dates.default.eq(date, nextDate, unit);
  };

  var isEmpty = !_dates.default.inRange(date, min, max, unit);
  var isDisabled = disabled || isEmpty;
  var isNow = now && isEqual(now);
  var isFocused = !disabled && !isEmpty && isEqual(focusedItem);
  var isSelected = selected && isEqual(selected);

  var isOffView = date && focusedItem && viewUnit && _dates.default[viewUnit](date) !== _dates.default[viewUnit](focusedItem);

  var handleChange = function handleChange() {
    onChange(clamp(date, min, max));
  };

  return _react.default.createElement("td", {
    role: "gridcell",
    title: label,
    "aria-label": label,
    "aria-readonly": disabled,
    "aria-selected": isSelected,
    tabIndex: isFocused ? 0 : null,
    onClick: !isDisabled ? handleChange : undefined,
    className: (0, _classnames.default)('rw-cell', isNow && 'rw-now', isDisabled && 'rw-state-disabled', isEmpty && 'rw-cell-not-allowed', isOffView && 'rw-cell-off-range', isSelected && 'rw-state-selected')
  }, _react.default.createElement("span", {
    "aria-hidden": true
  }, children));
}

CalendarViewCell.propTypes = cellPropTypes;

CalendarView.Body = function (props) {
  return _react.default.createElement("tbody", _extends({
    className: "rw-calendar-body"
  }, props));
};

CalendarView.Row = function (props) {
  return _react.default.createElement("tr", _extends({
    role: "row",
    className: "rw-calendar-row"
  }, props));
};

CalendarView.Cell = CalendarViewCell;
var _default = CalendarView;
exports.default = _default;
module.exports = exports["default"];