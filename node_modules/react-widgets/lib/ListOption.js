"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  activeId: _propTypes.default.string,
  dataItem: _propTypes.default.any,
  index: _propTypes.default.number,
  focused: _propTypes.default.bool,
  selected: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  onSelect: _propTypes.default.func,
  component: _propTypes.default.string
};

function ListOption(_ref) {
  var className = _ref.className,
      children = _ref.children,
      activeId = _ref.activeId,
      dataItem = _ref.dataItem,
      focused = _ref.focused,
      selected = _ref.selected,
      disabled = _ref.disabled,
      onSelect = _ref.onSelect,
      _ = _ref.index,
      _ref$component = _ref.component,
      Tag = _ref$component === void 0 ? 'div' : _ref$component,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "children", "activeId", "dataItem", "focused", "selected", "disabled", "onSelect", "index", "component"]);

  var handleSelect = function handleSelect(event) {
    if (onSelect && !disabled) onSelect(dataItem, event);
  };

  var classes = {
    'rw-state-focus': focused,
    'rw-state-selected': selected,
    'rw-state-disabled': disabled
  };
  var id = focused ? activeId : undefined;
  return _react.default.createElement(Tag, _extends({
    id: id,
    role: "option",
    tabIndex: !disabled ? '-1' : undefined,
    "aria-selected": !!selected,
    className: (0, _classnames.default)('rw-list-option', className, classes),
    onClick: handleSelect
  }, props), children);
}

ListOption.propTypes = propTypes;
var _default = ListOption;
exports.default = _default;
module.exports = exports["default"];